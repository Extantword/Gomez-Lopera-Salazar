# -*- coding: utf-8 -*-
"""Experiments_QR_Decomposition.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FlQsPD2T1-8m3JBKc9wlCaegS3BhqJPi
"""

import numpy as np
np.set_printoptions(precision=3)
np.set_printoptions(suppress=True)

def householder_qr(A):
    """"

    Parametros
    A: Matriz a descomponer

    Returna:
    tupla: (Q, R) donde Q es matriz ortogonal y R es matriz triangular superior
    """

    A = np.array(A, dtype=float)
    m, n = A.shape
    Q = np.eye(m)
    R = A.copy()

    # Itera cada columna
    for j in range(min(m-1, n)):
        # Extraemos la columna en la que estamos trbajando
        x = R[j:, j]

        # Calculamos el vector de householder
        e1 = np.zeros_like(x)
        e1[0] = 1

        alpha = -np.sign(x[0]) * np.linalg.norm(x) # Multiplicamos por el signo para estabilidad
                                                   # num√©rica
        u = x - alpha * e1
        v = u / np.linalg.norm(u)
        H = np.eye(m)
        H[j:, j:] -= 2.0 * np.outer(v, v)
        R = H @ R
        Q = Q @ H.T # Vamos acumulando Q

    # Ponemos ceros en la triangular inferior para asegurar que es triangular superior
    for i in range(m):
        for j in range(i):
            if j < n:
                R[i, j] = 0.0

    return Q, R

A = np.array([[1, 0, 0, 0],
              [3, 2, 0, 0],
              [1, 1, 4, 0],
              [1, 2, 1, 7]]) #Defina su matriz

Q, R = householder_qr(A)
Q @ R