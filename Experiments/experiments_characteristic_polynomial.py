# -*- coding: utf-8 -*-
"""Experiments_Characteristic_Polynomial.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yhVRt72nzgRwWScG8b7a2RoDHMBsyjDk
"""

import numpy as np

# Function to compute eigenvalues and eigenvectors of a matrix
def compute_eigen(matrix):
    eigenvalues, eigenvectors = np.linalg.eig(matrix)
    # Force eigenvalues and eigenvectors to be real if the imaginary part is negligible
    eigenvalues = eigenvalues.real  # Remove imaginary part completely
    eigenvectors = eigenvectors.real  # Remove imaginary part completely
    return eigenvalues, eigenvectors

# Function to compute the characteristic polynomial of a matrix
def characteristic_polynomial(matrix):
    return np.poly(matrix)

# Compute the error for eigenvalues and eigenvectors
def compute_error(matrix, eigenvalues, eigenvectors):
    max_error = 0
    for i, eigenvalue in enumerate(eigenvalues):
        vec = eigenvectors[:, i]
        error = np.linalg.norm(matrix @ vec - eigenvalue * vec)
        max_error = max(max_error, error)
    return max_error

# Define a function to display results clearly for a single matrix
def display_results_for_matrix(matrix, matrix_name):
    eigenvalues, eigenvectors = compute_eigen(matrix)
    char_poly = characteristic_polynomial(matrix)
    max_error = compute_error(matrix, eigenvalues, eigenvectors)

    # Format the results nicely
    print(f"\nResults for Matrix {matrix_name}:")
    print(f"Matrix:\n{matrix}\n")
    print("Characteristic Polynomial:")
    print(" + ".join([f"{coeff:.3f}x^{len(char_poly)-i-1}" for i, coeff in enumerate(char_poly) if coeff != 0]).replace("x^0", ""))
    print("\nEigenvalues:")
    print(", ".join([f"{val:.3f}" for val in eigenvalues]))

    # Format eigenvectors nicely
    print("\nEigenvectors:")
    for i in range(eigenvectors.shape[1]):
        print(f"Eigenvector {i+1}: [{', '.join([f'{v:.3f}' for v in eigenvectors[:, i]])}]")

    print(f"\nMax Error: {max_error:.2e}")
    print("-" * 50)

# Define matrices as provided
matrices = {
    "A": np.array([[2, 1], [3, 4]]),
    "B": np.array([[3, 2], [3, 4]]),
}

# Display results for each matrix one by one
for name, matrix in matrices.items():
    display_results_for_matrix(matrix, name)