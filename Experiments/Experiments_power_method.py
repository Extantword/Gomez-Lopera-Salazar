# -*- coding: utf-8 -*-
"""Experiments_Power_Method.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yHfjC2m0CE988Li6bm7CbOZpnlDf4o25
"""

import numpy as np

def PowerMethod(A, x0 , TOL, N): #A es la matriz, x0 el vector inicial, TOL es la tolerancia y N es el numero maximo de iteraciones deseadas.
  k = 1  # Contador de iteraciones
  x = x0 / np.linalg.norm(x0, ord=np.inf)  # Normalizar el vector inicial utilizando la norma infinita
  mu = 0  # Inicializar el valor propio


  while k <= N:
    y = A @ x  # Calcular el producto matriz-vector
    mu_n = np.linalg.norm(y, ord = np.inf) / np.linalg.norm(x, ord = np.inf)  # Calcular la aproximación del valor propio

    if np.linalg.norm(y, ord=np.inf) == 0:  # Si la norma de y es cero, la matriz tiene un valor propio cero
      print(f'Por favor ingrese otro vector x, pues con {x0} la matriz A tiene un valor propio 0')
      return None

    x_n = y / np.linalg.norm(y, ord=np.inf)  # Normalizar y para obtener la siguiente aproximación del vector propio
    ERR = abs(mu_n - mu)  # Calcular el error entre los vectores sucesivos

    if ERR < TOL:
      return mu_n, x_n  # Retornar el valor propio dominante y el vector propio correspondiente

    # Actualizar x y el valor propio para la siguiente iteración
    x = x_n
    mu = mu_n
    k += 1  # Incrementar el contador de iteración

  print('El número máximo de iteraciones ha sido alcanzado y no se logró llegar a la tolerancia necesaria.')
  return None

def verificador(A):
  eigenvalues, eigenvectors = np.linalg.eig(A)
  for i in range(len(eigenvalues)):
    print(f"Valor propio {i + 1}: {eigenvalues[i]}")
    print(f"Vector propio {i + 1}: {eigenvectors[:, i] / np.linalg.norm(eigenvectors[:, i], ord=np.inf)}\n")


A = np.array([[2,1],
             [3,4]]) #Defina su matriz nxn

x0 = np.random.rand(2)
TOL = 1e-10 #Coloque su tolerancia
N = 100 #Y el numero de iteraciones MAXIMO que desea

Resultado = PowerMethod(A,x0,TOL,N)
if Resultado is not None:
    mu, x = Resultado
    print(f'Valor propio: {mu}, Vector propio: {x}')
    print('\n')
    verificador(A)